{"version":3,"sources":["components/app.js","gdax-websocket.js","index.js"],"names":["App","state","tickerMessages","devChartMin","devChartMax","priceAt24hOpening","handleNewTickerMessage","newTickerMessage","_this","length","setState","parseInt","low_24h","high_24h","parseFloat","open_24h","controlledTicker","concat","splice","previousState","console","log","trendUp","price","react_default","a","createElement","subscriptionId","onDataReceivedCallback","gdaxSocket","this","websocket","WebSocket","onopen","message","JSON","stringify","type","channels","name","product_ids","send","onmessage","event","parse","data","close","className","src","alt","LineChart","width","height","Tooltip","Legend","YAxis","domain","Line","dataKey","stroke","activeDot","r","CartesianGrid","strokeDasharray","map","msg","key","sequence","time","React","Component","ReactDOM","render","app","document","getElementById"],"mappings":"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","file":"static/js/main.b5bd29bf.chunk.js","sourcesContent":["import React from \"react\"\nimport { LineChart, Line, Tooltip, Legend, YAxis, CartesianGrid } from \"recharts\"\nimport openGdaxWebsocket from \"../gdax-websocket\"\n\nclass App extends React.Component {\n\n  state = {\n    tickerMessages: [],\n    devChartMin: -1,\n    devChartMax: 6000,\n    priceAt24hOpening: 0\n  }\n  componentDidMount() {\n    this.websocket = openGdaxWebsocket(\"BTC-EUR\", this.handleNewTickerMessage)\n  }\n\n  componentWillUnmount() {\n    this.websocket.close()\n  }\n\n  handleNewTickerMessage = newTickerMessage => {\n    if (this.state.tickerMessages.length) {\n      this.setState({\n        devChartMin: parseInt(this.state.tickerMessages[0].low_24h - 10, 10),\n        devChartMax: parseInt(this.state.tickerMessages[0].high_24h + 10, 10),\n        priceAt24hOpening: parseFloat(this.state.tickerMessages[0].open_24h)\n      })\n    }\n\n    let controlledTicker = this.state.tickerMessages.concat([newTickerMessage])\n    if (controlledTicker.length > 100) {\n      controlledTicker = controlledTicker.splice(controlledTicker.length - 100, 100)\n    }\n    this.setState((previousState) => ({\n      tickerMessages: controlledTicker\n    }), () => console.log(this.state.tickerMessages))\n  }\n\n  trendUp = () => {\n    if (this.state.tickerMessages.length) {\n      return (this.state.tickerMessages[this.state.tickerMessages.length - 1].price >=\n        this.state.priceAt24hOpening)\n    } else {\n      return <p>Loading...</p>\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"master-wrapper\">\n        <header className=\"header\">\n          <img className=\"header__image\" src=\"./coin.png\" alt=\"bitcoin\" />\n          <h1 className=\"header__title\">\n            SEE YOUR <span className=\"header__title--highlight\">B</span>C<br />\n            TRA<span className=\"header__title--highlight\">C</span>K YA $TACK<br />\n            <span className=\"header__title--highlight\">CHART</span> WITH YOUR HEART\n          </h1>\n\n        </header>\n        <section className=\"graph-container\">\n          <h2 className=\"graph-container__header\">DEVELOPMENT</h2>\n          <h2 className=\"graph-container__header\">DEMAND</h2>\n          <LineChart className=\"graph\" width={400} height={400} data={this.state.tickerMessages}>\n            <Tooltip />\n            <Legend />\n            <YAxis type=\"number\" domain={[this.state.devChartMin, this.state.devChartMax]} />\n            <Line type=\"monotone\" dataKey=\"price\" stroke=\"green\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" dataKey=\"low_24h\" stroke=\"purple\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" dataKey=\"high_24h\" stroke=\"pink\" activeDot={{ r: 8 }} />\n          </LineChart>\n\n          <LineChart className=\"graph\" width={400} height={400} data={this.state.tickerMessages}>\n            <Tooltip />\n            <Legend />\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <YAxis type=\"number\" domain={[\"best_bid\", \"best_ask\"]} />\n            <Line type=\"basis\" dataKey=\"price\" stroke=\"green\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" dataKey=\"best_ask\" stroke=\"red\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" dataKey=\"best_bid\" stroke=\"blue\" activeDot={{ r: 8 }} />\n          </LineChart>\n        </section>\n\n        <section className=\"info-section\">\n          <div className=\"transactions-container\">\n            <h2>TRANSACTIONS:</h2>\n            {this.state.tickerMessages.map(msg => (\n              <div key={msg.sequence}>\n                {msg.time}: <strong>{msg.price} EUR</strong>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"trend-container\">\n            <h2>24H BITCOIN TREND:</h2>\n            {this.state.tickerMessages.length > 1 &&\n              <div>\n                <p><strong>Opening:</strong> {this.state.priceAt24hOpening} EUR</p>\n                <p><strong>Now: </strong> \n                  {this.state.tickerMessages[this.state.tickerMessages.length - 1].price} EUR\n                </p>\n\n                {this.trendUp() ?\n                  <img className=\"trend-container__image\" alt=\"trend up\" src=\"./happy2.png\" /> :\n                  <img className=\"trend-container__image\" alt=\"trend down\" src=\"./sad2.png\" />\n                }\n              </div>\n            }\n          </div>\n\n        </section>\n\n      </div>\n    )\n  }\n\n}\n\nexport default App\n","export default (subscriptionId, onDataReceivedCallback) => {\n  const gdaxSocket = new WebSocket(\"wss://ws-feed.gdax.com\")\n\n  gdaxSocket.onopen = () => {\n    console.log(\"WebSocket opened\")\n    const message = JSON.stringify({\n      type: \"subscribe\",\n      channels: [{ name: \"ticker\", product_ids: [subscriptionId] }]\n    })\n\n    gdaxSocket.send(message)\n  }\n\n  gdaxSocket.onmessage = event => {\n    const message = JSON.parse(event.data)\n\n    if (message.type === \"ticker\") {\n      onDataReceivedCallback(message)\n    } else {\n      // Unknown message type, just log it.\n      console.log(\"Message received\", message)\n    }\n  }\n\n  return gdaxSocket\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./components/app\"\nimport \"./index.scss\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}